/**
 * Author: Ashley Clarke
 * Copyright: 2014
 *
 * Allows editing of images using
 * canvas, built using the facade pattern.
 */

var ImageManager = function(canvasId) {
  // construct
  function init() {
    // real canvas
    _private.canvas = document.getElementById(canvasId);
    _private.context = _private.canvas.getContext('2d');

    // secret canvas
    _secretCanvas.canvas = document.createElement('canvas');
    _secretCanvas.context = _secretCanvas.canvas.getContext('2d');
  }

  // private
  var _secretCanvas = {
    source: { x: 0, y: 0, width: 0, height: 0 },
    dest: { x: 0, y: 0, width: 0, height: 0 },
    draw: function(data) {
      this.clear();
      this.context.drawImage(
        data,
        this.source.x,
        this.source.y,
        this.source.width,
        this.source.height,
        this.dest.x,
        this.dest.y,
        this.dest.width,
        this.dest.height
      );
    },
    setSize: function(width, height) {
      this.source.width = this.dest.width = width;
      this.source.height = this.dest.height = height;
      // more than compensates for rotation
      this.canvas.width = width + height;
      this.canvas.height = width + height;
    },
    clear: function() {
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }
  };

  // private
  var _private = {
    source: { x: 0, y: 0, width: 0, height: 0 }, // prob wont use
    dest: { x: 0, y: 0, width: 0, height: 0 },
    scale: 1,
    scaleLine: 1,
    load: function(src, callback) {
      // other initialisation
      this.image = new Image();
      this.image.src = src;

      var self = this;
      this.image.onload = function() {
        _secretCanvas.setSize(self.image.width, self.image.height);
        self.canvas.width = self.image.width;
        self.canvas.height = self.image.height;
        self.scaleLine = Math.round(self.canvas.width / 800);
        // console.log(self.canvas.width);
        _secretCanvas.draw(self.image);
        callback.call(public);
      };
    },
    draw: function() {
      this.context.drawImage(_secretCanvas.canvas, 0, 0);
    },

    scaleWidthTo: function(value) {
      this.scale = _secretCanvas.source.width / value;
      _secretCanvas.dest.width = _secretCanvas.source.width / this.scale;
      _secretCanvas.dest.height = _secretCanvas.source.height / this.scale;
      _secretCanvas.draw(this.image);
    },
    scaleHeightTo: function(value) {
      this.scale = _secretCanvas.source.height / value;
      _secretCanvas.dest.width = _secretCanvas.source.width / this.scale;
      _secretCanvas.dest.height = _secretCanvas.source.height / this.scale;
      _secretCanvas.draw(this.image);
    },
    crop: function(value) {
      _secretCanvas.source.x = value.x * this.scale;
      _secretCanvas.source.width = value.width * this.scale;
      _secretCanvas.source.y = value.y * this.scale;
      _secretCanvas.source.height = value.height * this.scale;
      _secretCanvas.dest.width = value.width;
      _secretCanvas.dest.height = value.height;
      _secretCanvas.draw(this.image);
    },
    cropRight: function(value) {
      _secretCanvas.source.width = value * this.scale;
      _secretCanvas.dest.width = value;
      _secretCanvas.draw(this.image);
    },
    cropLeft: function(value) {
      _secretCanvas.source.x = _secretCanvas.source.width - value * this.scale;
      _secretCanvas.source.width = value * this.scale;
      _secretCanvas.dest.width = value;
      _secretCanvas.draw(this.image);
    },
    cropBottom: function(value) {
      _secretCanvas.source.height = value * this.scale;
      _secretCanvas.dest.height = value;
      _secretCanvas.draw(this.image);
    },
    cropTop: function(value) {
      _secretCanvas.source.y = _secretCanvas.source.height - value * this.scale;
      _secretCanvas.source.height = value * this.scale;
      _secretCanvas.dest.height = value;
      _secretCanvas.draw(this.image);
    },
    cropWidth: function(value) {
      _secretCanvas.source.x =
        (_secretCanvas.source.width - value * this.scale) / 2;
      _secretCanvas.source.width = value * this.scale;
      _secretCanvas.dest.width = value;
      _secretCanvas.draw(this.image);
    },
    cropHeight: function(value) {
      _secretCanvas.source.y =
        (_secretCanvas.source.height - value * this.scale) / 2;
      _secretCanvas.source.height = value * this.scale;
      _secretCanvas.dest.height = value;
      _secretCanvas.draw(this.image);
    },
    getContext: function() {
      return this.context;
    },
    getCanvas: function() {
      return this.canvas;
    }
  };

  // initialise the awesome!
  init();

  // public
  var public = {
    load: function(src, callback) {
      return _private.load(src, callback);
    },
    draw: function() {
      _private.draw();
    },
    clear: function() {
      var cv = _private.getCanvas();
      var cx = _private.getContext();
      cx.clearRect(0, 0, cv.width, cv.height);
    },
    scaleWidthTo: function(value) {
      _private.scaleWidthTo(value);
      return this;
    },
    scaleHeightTo: function(value) {
      _private.scaleHeightTo(value);
      return this;
    },
    scaleMaxTo: function(value) {
      if (_private.image.width > _private.image.height) {
        this.scaleWidthTo(value);
      } else {
        this.scaleHeightTo(value);
      }
      return this;
    },
    scaleMinTo: function(value) {
      if (_private.image.width < _private.image.height) {
        this.scaleWidthTo(value);
      } else {
        this.scaleHeightTo(value);
      }
      return this;
    },
    crop: function(value) {
      _private.crop(value);
      return this;
    },
    cropRight: function(value) {
      _private.cropRight(value);
      return this;
    },
    cropLeft: function(value) {
      _private.cropLeft(value);
      return this;
    },
    cropBottom: function(value) {
      _private.cropBottom(value);
      return this;
    },
    cropTop: function(value) {
      _private.cropTop(value);
      return this;
    },
    cropWidth: function(value) {
      _private.cropWidth(value);
      return this;
    },
    cropHeight: function(value) {
      _private.cropHeight(value);
      return this;
    },
    square: function(value) {
      this.scaleMinTo(value);
      this.cropHeight(value);
      this.cropWidth(value);
      return this;
    },
    drawRotatedRect: function(rotatedRect, lineWidth) {
      var cv = _private.getCanvas();
      var cx = _private.getContext();

      var c = rotatedRect[0];

      cx.save();
      cx.translate(c[0], c[1]);
      cx.rotate((Math.PI / 180.0) * rotatedRect[2]);
      var r = {
        w: rotatedRect[1][0],
        h: rotatedRect[1][1]
      };
      r.x = r.w / -2;
      r.y = r.h / -2;
      cv.strokeStyle = '#000000';
      cx.lineWidth = (lineWidth || 1) * _private.scaleLine;
      cx.strokeRect(r.x, r.y, r.w, r.h);
      cx.restore();
    },
    drawText: function(css, text) {
      var cx = _private.getContext();
      var fontSize = (css.fontSize || 30) * _private.scaleLine;
      // console.log(css);
      cx.save();
      cx.font = fontSize + 'px ' + (css.fontFamily || 'Arial');
      cx.translate(css.left, css.top);
      cx.rotate((Math.PI / 180.0) * (css.angle || 0));
      cx.textBaseline = css.align || 'top';
      cx.textAlign = css.textAlign || 'left';
      var width = cx.measureText(text).width;
      // draw background rect assuming height of font
      cx.fillStyle = 'rgba(0, 0, 0, 0.5)';
      cx.fillRect(0, 0, width, fontSize);
      cx.fillStyle = css.color || 'white';
      cx.fillText(text, 0, 0);
      cx.restore();
    }
  };

  return public;
};
